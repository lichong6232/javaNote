spring 就是处理对象的创建的、以及对象的依赖关系



inversion of controller 控制反转，对象的创建由外部容器完成，这个就叫做控制反转。解决对象的创建

依赖注入：处理对象的依赖关系，解决对象的依赖



IOC容器=工厂类+applicationContext.xml



2、对象创建细节

对象数量

action,多个，用来维护成员变量

service,1个，不需要维护公共变量

dao ,1个，不需要维护公共变量

创建时间

action访问时候创建

service启动时候创建

dao启动时候创建

3、对象的依赖关系

action依赖service

service依赖dao



ioc创建对象的时候默认的是单例模式(singleton，service/dao/工具类)可以通过scope="prototype"设置成多例



当scope="prototype"的时候，是在用到对象的时候创建对象

当scope="singleton"的时候，在容器初始化之前就已经创建了对象，可以通过lazy-init="true"设置为当用到对象的时候创建对象，lazy-init只对singleton有效



创建对象之后初始化/销毁

init-method="对象中的方法"，在对象创建之后执行

destory-method="对象中的方法"，在调用容器对象的destory方法的时候执行（容器用实现类）



springIOC容器是spring的核心内容

作用：创建对象以及处理对象的依赖关系



ioc容器创建对象

创建对象有几种方式

1、调用无参构造方法

<bean id="str" class="java.lang.String">

		<constructor-arg value="Jacks"></constructor-arg>

	</bean>

2、调用有参构造方法

<bean id="user3" class="cn.itcast.b_create_obj.User">

		<constructor-arg index="0" type="int" value="100"></constructor-arg>

		<constructor-arg index="1" type="java.lang.String" ref="str"></constructor-arg>

	</bean>

3、工厂创建

	工厂类，静态方法创建对象

	<!-- 先创建工厂 -->

	<bean id="factory" class="cn.itcast.b_create_obj.ObjectFactory"></bean>

	<!-- 在创建user对象，用factory方的实例方法 -->

	<bean id="user4" factory-bean="factory" factory-method="getInstance"></bean>

	工厂类，非静态方法创建对象

	<!-- # 3.2 工厂类： 静态方法 -->

	<!-- 

		class 指定的就是工厂类型

		factory-method  一定是工厂里面的“静态方法”

	 -->

	<bean id="user" class="cn.itcast.b_create_obj.ObjectFactory" factory-method="getStaticInstance"></bean>



<!-- 对象写法 -->

	<!-- 

	问题：spring配置文件中，bean节点的id与name属性的区别?

		id 不能有特殊符号, 且唯一，且不能以数字开始

		name 可以有特殊符号

	 -->

	<bean id="test" name="1test"  class="cn.itcast.b_create_obj.User"></bean>



2）对象依赖关系

spring中，如何给对象的属性赋值？

1）通过构造函数
<!--  1) 通过构造函数 -->
	<bean id="user1" class="cn.itcast.c_property.User" scope="prototype">
		<constructor-arg value="100"></constructor-arg>
		<constructor-arg value="Tom"></constructor-arg>
	</bean>

2）通过set方法给属性注入值
<!-- 2) 通过set方法给属性注入值 -->
	<bean id="user" class="cn.itcast.c_property.User" scope="prototype">
		<property name="id" value="101"></property>
		<property name="name" value="Jack"></property>
	</bean>
	常用set方法注入

	<bean id="userDao" class="cn.itcast.c_property.UserDao"></bean>

	<!-- service instance -->
	<bean id="userService" class="cn.itcast.c_property.UserService">
		<property name="userDao" ref="userDao"></property>
	</bean>
	
	<!-- action instance -->
	<bean id="userAction" class="cn.itcast.c_property.UserAction">
		<property name="userService" ref="userService"></property>
	</bean>


		内部bean
	<bean id="userAction" class="cn.itcast.c_property.UserAction">
		<property name="userService">
			<bean class="cn.itcast.c_property.UserService">
				<property name="userDao">
					<bean class="cn.itcast.c_property.UserDao"></bean>
				</property>
			</bean>
		</property>
	</bean>

3）p名称空间,spring3.0以上支持

 <bean id="userDao" class="cn.itcast.c_property.UserDao"></bean>
	 
	 <bean id="userService" class="cn.itcast.c_property.UserService" p:userDao-ref="userDao"></bean>
	 
	 <bean id="userAction" class="cn.itcast.c_property.UserAction" p:userService-ref="userService"></bean>

4）自动装配，autowire="byName",autowire="byType"
写全局，default-qutowire="byName"，这样就不用每个bean节点都去写autowire="byName"
如果根据类型自动装配，必须确保IOC容器中只有一个该类型的对象

5）注解

@component将当前对象加入到ioc容器，dao层与service 都可以使用。
@Resouce(name="userDao"),根据名称去容器中查找，@Resouce,根据类型去容器中查找，主要要确保容器中只有一个该类型的变量
为了使逻辑更加清晰，@Repository,在持久层可以使用这个注解，@Service表示业务逻辑层的组件，@Controller控制层的组件

将对象加入到ioc容器有两种方式一种是通过注解，一种是用xml配置文件。且两种可以一起使用


1. 代理模式
1.1 概述
 代理（Proxy）是一种设计模式， 提供了对目标对象另外的访问方式；即通过代理访问目标对象。 这样好处： 可以在目标对象实现的基础上，增强额外的功能操作。(扩展目标对象的功能)。
举例：明星（邓紫棋）---经纪人<-------用户  
	    目标           （代理）

1.2 静态代理
静态代理，
	1） 代理对象，要实现与目标对象一样的接口；
	2） 举例:
			保存用户(模拟)
				Dao  ,  直接保存
				DaoProxy, 给保存方法添加事务处理






总结静态代理：
	1）可以做到在不修改目标对象的功能前提下，对目标对象功能扩展。
	2）缺点：
		--》  因为代理对象，需要与目标对象实现一样的接口。所以会有很多代理类，类太多。
		--》  一旦接口增加方法，目标对象与代理对象都要维护。

解决：
	代理工厂？  可以使用动态代理。

AOP可以实现核心业务代码与关注点代码分离


3、AOP编程
AOP,Aspect Obejct Programing,面向切面编程
功能：让关注点代码与业务代码分离
关注点：很多重复代码叫做关注点
切面：关注点形成的类，就叫做切面（类）
面向切面编程：就是指对很多功能都有的重复代码的抽取，再在运行的时候往业务方法上动态植入“切面类代码”

切入点
执行目标对象方法，动态植入切面代码
可以通过切入点表达式，指定拦截哪些类的哪些方法，给指定的类在运行的时候植入切入类代码

@Aspect							指定一个类为切面类		
@Pointcut("execution(* cn.itcast.e_aop_anno.*.*(..))")  指定切入点表达式

@Before("pointCut_()")				前置通知: 目标方法之前执行
@After("pointCut_()")					后置通知：目标方法之后执行（始终执行）
@AfterReturning("pointCut_()")		    返回后通知： 执行方法结束前执行(异常不执行)
@AfterThrowing("pointCut_()")			异常通知:  出现异常时候执行
@Around("pointCut_()")				环绕通知： 环绕目标方法执行


如果同时有2个AOP切面，那么如何设定优先级呢？Spring提供了“@order()”的注解方式，@order(1)则表示优先级最高，order(n)，n越小，优先级越高。


AOP，面向切面编程，主要是实现关注点代码与业务代码相分离，关注点代码指的是一些重复代码，核心思想是对很多功能都有的重复代码进行抽离，再在运行的时候往业务方法中动态植入“切面类代码”

IOC,控制反转，主要是解决对象的创建以及对象的依赖问题，具体的讲：当某个角色 
需要另外一个角色协助的时候，在传统的程序设计过程中，通常由调用者来创建被调用者的实例。但在spring中 
创建被调用者的工作不再由调用者来完成，因此称为控制反转。创建被调用者的工作由spring来完成，然后注入调用者 
因此也称为依赖注入。 

1、原子性 Atomicity  事务的原子性指的是，事务中包含的程序作为数据库的逻辑工作单位，它所做的对数据修改操作要么全部执行，要么完全不执行。这种特性称为原子性。
 2、一致性 Consistency  事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态。这种特性称为事务的一致性。假如数据库的状态满足所有的完整性约束，就说该数据库是一致的。
 事务开始和结束之间的中间状态不会被其他事务看到
3、隔离性 Isolation  隔离性指并发的事务是相互隔离的。即一个事务内部的操作及正在操作的数据必须封锁起来，不被其它企图进行修改的事务看到。 
我的理解应该是并发的事务之间应该具有一定的隔离级别
4、持久性 Durability  持久性意味着当系统或介质发生故障时，确保已提交事务的更新不能丢失。即一旦一个事务提交，DBMS保证它对数据库中数据的改变应该是永久性的，耐得住任何数据库系统故障。持久性通过数据库备份和恢复来保证。

事物的隔离级别
现在来看看MySQL数据库为我们提供的四种隔离级别：

　　① Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。

　　② Repeatable read (可重复读)：可避免脏读、不可避免不可重复读的发生。

　　③ Read committed (读已提交)：可避免脏读的发生。

　　④ Read uncommitted (读未提交)：最低级别，任何情况都无法保证。


事务的传播行为
PROPAGATION_REQUIRED--支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 
PROPAGATION_SUPPORTS--支持当前事务，如果当前没有事务，就以非事务方式执行。 
PROPAGATION_MANDATORY--支持当前事务，如果当前没有事务，就抛出异常。 
PROPAGATION_REQUIRES_NEW--新建事务，如果当前存在事务，把当前事务挂起。 
PROPAGATION_NOT_SUPPORTED--以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 
PROPAGATION_NEVER--以非事务方式执行，如果当前存在事务，则抛出异常。
PROPAGATION_NESTED ，字面也可知道，nested，嵌套级别事务。该传播级别特征是，如果上下文中存在事务，则嵌套事务执行，如果不存在事务，则新建事务。

Propagation.REQUIRED
指定当前的方法必须在事务的环境下执行；
		如果当前运行的方法，已经存在事务， 就会加入当前的事务；
Propagation.REQUIRED_NEW
		指定当前的方法必须在事务的环境下执行；
如果当前运行的方法，已经存在事务：  事务会挂起； 会始终开启一个新的事务，执行完后；  刚才挂起的事务才继续运行。

PROPAGATION_REQUIRES_NEW 启动一个新的, 不依赖于环境的 "内部" 事务. 这个事务将被完全 commited 或 rolled back 而不依赖于外部事务, 它拥有自己的隔离范围, 自己的锁, 等等. 当内部事务开始执行时, 外部事务将被挂起, 内务事务结束时, 外部事务将继续执行. 
另一方面, PROPAGATION_NESTED 开始一个 "嵌套的" 事务,  它是已经存在事务的一个真正的子事务. 潜套事务开始执行时,  它将取得一个 savepoint. 如果这个嵌套事务失败, 我们将回滚到此 savepoint. 潜套事务是外部事务的一部分, 只有外部事务结束后它才会被提交. 
由此可见, PROPAGATION_REQUIRES_NEW 和 PROPAGATION_NESTED 的最大区别在于, PROPAGATION_REQUIRES_NEW 完全是一个新的事务, 而 PROPAGATION_NESTED 则是外部事务的子事务, 如果外部事务 commit, 潜套事务也会被 commit, 这个规则同样适用于 roll back.






